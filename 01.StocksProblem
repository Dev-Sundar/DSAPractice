class Solution {
    public int maxProfit(int[] prices) {
        // Handle edge case where no transaction is possible.
        if (prices == null || prices.length < 2) {
            return 0;
        }

        int minPrice = prices[0]; // Keep track of the lowest price found so far.
        int maxProfit = 0;        // Keep track of the maximum profit found so far.

        // Start from the second day (index 1).
        for (int i = 1; i < prices.length; i++) {
            int currentPrice = prices[i];

            // Calculate potential profit if we sell today.
            int potentialProfit = currentPrice - minPrice;

            // Update the maximum profit if this is a better deal.
            maxProfit = Math.max(maxProfit, potentialProfit);

            // Update the minimum price if we find a new low.
            minPrice = Math.min(minPrice, currentPrice);
        }

        return maxProfit;
    }
}


Algorithm:
1.If the prices are null return 0
2.Make the minprice as arr[0] and max as 0
3.using for loop - start from index 1 and if i<n;i++
4.make currentPrice = arr[i]; calculate potentialProfit by subracting cP-minPrice
5.calc max profit by comparing(maxProfit&potentialprofit)
6.calc mix price by comparing(minPrice&cP)
7.return maxProfit
